package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.29

import (
	"context"
	"fmt"

	graphql1 "github.com/sesaquecruz/goexpert-clean-architecture-lab/internal/infra/graphql"
	"github.com/sesaquecruz/goexpert-clean-architecture-lab/internal/infra/graphql/model"
	"github.com/sesaquecruz/goexpert-clean-architecture-lab/internal/usecase"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, in *model.CrateOrderInput) (*model.Order, error) {
	input := usecase.CreateOrderInputDTO{
		Price: in.Price,
		Tax:   in.Tax,
	}

	output, err := r.CreateOrderUseCase.Execute(ctx, input)
	if err != nil {
		return nil, err
	}

	order := model.Order{
		ID:         output.Id,
		Price:      output.Price,
		Tax:        output.Tax,
		FinalPrice: output.FinalPrice,
	}

	return &order, nil
}

// ListOrders is the resolver for the listOrders field.
func (r *queryResolver) ListOrders(ctx context.Context) ([]*model.Order, error) {
	output, err := r.ListOrdersUseCase.Execute(ctx)
	if err != nil {
		return nil, err
	}

	var orders []*model.Order
	for _, out := range output {
		order := model.Order{
			ID:         out.Id,
			Price:      out.Price,
			Tax:        out.Tax,
			FinalPrice: out.FinalPrice,
		}

		orders = append(orders, &order)
	}

	return orders, nil
}

// Mutation returns graphql1.MutationResolver implementation.
func (r *Resolver) Mutation() graphql1.MutationResolver { return &mutationResolver{r} }

// Query returns graphql1.QueryResolver implementation.
func (r *Resolver) Query() graphql1.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	panic(fmt.Errorf("not implemented: Orders - orders"))
}
